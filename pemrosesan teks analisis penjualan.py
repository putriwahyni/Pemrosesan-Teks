# -*- coding: utf-8 -*-
"""PSI Jaya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14D5jsOoGTKlS9KBhMIRq5Njy6e2R9GNa

# Memuat Data
"""

import pandas as pd

# Muat data
data_train = pd.read_csv('train.csv')
data_holidays = pd.read_csv('holidays_events.csv')
data_oil = pd.read_csv('oil.csv')
data_stores = pd.read_csv('stores.csv')
data_transactions = pd.read_csv('transactions.csv')

# Pratinjau data
print(data_train.head())

"""# Analisis Awal"""

# Periksa missing values
print(data_train.isnull().sum())

# Statistik deskriptif
print(data_train.describe())

# Gabungkan dataset untuk menyertakan informasi relevan
data_train = pd.merge(data_train, data_holidays, on='date', how='left')
data_train = pd.merge(data_train, data_oil, on='date', how='left')
data_train = pd.merge(data_train, data_stores, on='store_nbr', how='left')
data_train = pd.merge(data_train, data_transactions, on=['date', 'store_nbr'], how='left')

print(data_train.head())

data_train.head()

"""# Preprocesing Data"""

# Periksa missing values
print(data_train.isnull().sum())

# Hapus missing values
data_train = data_train.dropna()

# Pilih fitur yang relevan
features = data_train[['onpromotion', 'transactions', 'dcoilwtico', 'store_nbr', 'family']]
target = data_train['sales']

features = pd.get_dummies(features, columns=['family', 'store_nbr'], drop_first=True)

# Bagi data menjadi train dan test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

data_train.head()

"""# Model Linear Regresion"""

from sklearn.linear_model import LinearRegression

# Buat model regresi linear
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi pada data test
y_pred = model.predict(X_test)

"""# Evaluasi Model"""

from sklearn.metrics import mean_squared_error, r2_score

# Hitung Mean Squared Error (MSE) dan R-squared (R^2)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

"""# Evaluasi Hasil"""

import matplotlib.pyplot as plt

# Plot hasil prediksi vs nilai aktual
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # Garis sempurna
plt.xlabel('Nilai Aktual')
plt.ylabel('Nilai Prediksi')
plt.title('Prediksi vs Nilai Aktual')
plt.show()

"""# Hubungan Linear antar Variabel dengan Koefisien Korelasi"""

# Hitung koefisien korelasi
correlation_matrix = data_train.corr(numeric_only=True)
print(correlation_matrix['sales'].sort_values(ascending=False))

"""# Variabel Independen yang Mempengaruhi Variabel Dependen"""

import statsmodels.api as sm

# Tentukan variabel dependen
Y = data_train['sales']

# Tentukan variabel independen
X = data_train[['onpromotion', 'transactions', 'dcoilwtico', 'store_nbr', 'family']]
X = pd.get_dummies(X, columns=['family'], drop_first=True)
# Tambahkan konstanta ke model
X = sm.add_constant(X)
X = X.astype(float)

# Fit model regresi
model = sm.OLS(Y, X).fit()
print(model.summary())

"""# Analisis Pengaruh Hari Libur terhadap Penjualan"""

import matplotlib.pyplot as plt

# Buat kolom baru yang menunjukkan status liburan
data_train['is_holiday'] = data_train['type_x'].apply(lambda x: 1 if x in ['Holiday', 'Event'] else 0)

# Kelompokkan berdasarkan status liburan dan hitung rata-rata penjualan
holiday_sales = data_train.groupby('is_holiday')['sales'].mean()

# Plot hasil
holiday_sales.plot(kind='bar')
plt.xlabel('Status Liburan')
plt.ylabel('Rata-rata Penjualan')
plt.title('Dampak Hari Libur terhadap Penjualan')
plt.show()